---
title: "Introduction to R"
author: "[Pedro Cardoso-Leite](pedro.cardosoleite@uni.lu)"
title-block-banner: true
title-block-style: plain
affiliation-title: "University of Luxembourg" 
format: 
  revealjs:
    theme: [default, ../../../assets/revealjs_themes/teaching.scss]
    css: ../../../assets/revealjs_themes/style.css
    incremental: true
    chalkboard: true
    logo: "https://xcit.org/images/xcit/logofinaline.png"
    width: 1600
    height: 900
    mainfont: "IBM Plex Sans"
    pointer:
      color: "#db0d23"
      pointerSize: 24
    revealjs-plugins:
      - pointer
editor: visual
---

# What is "R"?

## What is "R"?

â†’ Ask [Wikipedia](https://en.wikipedia.org/wiki/R_(programming_language))!

## What is "R"?

> ... a programming language for statistical computing ...

## What is "R"?

-   what is a language?

-   what is a programming language?

-   what is a statistical programming language?


## The R language

 - [Base R Cheatsheet](https://rstudio.github.io/cheatsheets/base-r.pdf)



[Cheatsheets](https://posit.co/resources/cheatsheets/) are a great way to learn about specific topics/packages; we will use them quite a bit!
 






## History of R

-   [Wikipedia](https://en.wikipedia.org/wiki/R_(programming_language))

## Why use programming for data analysis?

1.  flexibility
2.  efficiency
3.  reproducibility
4.  NEW: AI-support

## R-Related terms

-   base R
-   packages, CRAN, GitHub
-   scripts
-   RStudio
-   tidyverse
-   other?

::: notes
Are there other terms you have heard before that are not listed here?
:::

## base R

When you install R, it comes with a set of core functionality.

This core functionality is sometimes referred to as base R (even though there are other packages included by defaul, e.g., `stats`, `datasets`)

Note that across successive updates of R (i.e., "versions"), that core functionality changes; usually quite slowly and in a "back-compatible way"--a main goal is **stability**.

*Examples:*

Base R includes for example functions to compute the mean and standar deviation of a vector of numbers.

## packages (for R)

Base R is limited and highly controlled.

You can however extend the cababilities of R by

-   using code written by others
    -   code snippets shared by others
    -   packages that you can download and install
-   write your own code

*Examples:*

-   ggplot2
-   dplyr
-   tidyverse

## base R + packages

This is a powerful and widely used pattern:

-   have the core be very stable and reliable
-   encourage creativity and diversity

## How to install packages?

Its super easy to install and use packages!

**Step 1: download the package on your computer**

```{r}
#| eval: false
#| echo: true
install.packages("package_name")
```

**Step 2: load the package when you needed (so you can use it)r**

```{r}
#| eval: false
#| echo: true
library("package_name")
```

::: notes
We will see and do this many times during this course.
:::

## R & RStudio

-   R is a programming language
-   R is a piece of software that understands the R language
-   RStudio is a separate piece of software that makes it easier and nicer to user R;
-   RStudio is one of many IDE that you can use for coding

## R & RStudio

::::: columns
::: {.column width="50%"}
![https://www.r-project.org/](../images/R-console.png){fig-align="center"}
:::

::: {.column width="50%"}
![https://posit.co/downloads/](../images/rstudio-panes-labeled.jpeg){fig-align="center"}
:::
:::::

# Why use R?

## Top 10 reasons to use R

1.  elegantly designed for modern data science (tidyverse)

2.  highly effective in integrating the full data science workflow (e.g., quarto)

3.  comprehensive, state-of-the-art methods (e.g., packages)

4.  exceptional data visualization tools (i.e., ggplot2)

5.  free and open

6.  runs on Linux, Mac, and Window

7.  active development

8.  strong community

9.  great resources

10. great value on the job market

## The tidyverse

This is a collection of well-designed packages that work well together.

If you learn how to use it, you will likely never go back to anything else.

![https://www.tidyverse.org](../images/tidyverse-sticker.png){fig-align="center"}

## Your needs are most likely already covered

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-width: 10
#| fig-height: 6
#| fig-align: center


library(tidyverse)
library(rvest)

# Fetch real CRAN package data from the official available packages page
packages <- read_html("https://cran.r-project.org/web/packages/available_packages_by_date.html") |>
  html_table() |>
  pluck(1) |>
  # Count packages per date
  group_by(Date) |>
  tally() |>
  mutate(
    total = cumsum(n),
    Date = as.Date(Date)
  ) |>
  ungroup()

# Aggregate by year for cleaner visualization
packages_yearly <- packages |>
  mutate(year = lubridate::year(Date)) |>
  group_by(year) |>
  slice_max(Date, n = 1) |>  # Get last entry of each year
  ungroup() |>
  select(year, packages = total)

# Get current info
current_year <- lubridate::year(Sys.Date())
current_count <- packages |> slice_max(Date, n = 1) |> pull(total)

# Create the plot
packages_yearly |>
  ggplot(aes(x = year, y = packages)) +
  geom_line(color = "#1da7e0", linewidth = 1.5) +
  geom_text(
    data = \(x) filter(x, year == current_year),
    aes(label = scales::comma(packages)),
    vjust = -1.5, 
    hjust = 0.5, 
    size = 5, 
    fontface = "bold"
  ) +
  labs(
    title = "There is an exponential growth of R packages!",
    x = "Year",
    y = "Number of packages on CRAN",
    caption = "Data: CRAN (cran.r-project.org/web/packages/available_packages_by_date.html)"
  ) +
  scale_y_continuous(labels = scales::comma) +
  scale_x_continuous(breaks = seq(min(packages_yearly$year), current_year, by = 2)) +
  theme_minimal(base_size = 16) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    panel.grid.minor = element_blank(),
    plot.caption = element_text(size = 10, hjust = 1)
  )
```

## The R ecosystem

![https://wec.wur.nl/dse/11-tidyverse.html](/chapters/chapter2/images/tidyverse_workflow_packages.png)

## The R ecosystem

-   [quarto](https://quarto.org/) (websites, presentations, books, articles)

-   [shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/) (interactive web applications)

-   and much more.

## Why NOT use R?

There are some common arguments againts R. 

 - R is hard to learn.
 - not sure which packages to use.
 - the different packages are inconsistent.


## Should you learn R?

- [APS](https://www.psychologicalscience.org/observer/why-you-should-become-a-user-a-brief-introduction-to-r)

- [Overview](https://www.guru99.com/r-programming-introduction-basics.html)




## Programming brings great power...

...with great power comes great precision:

 - Computers will do everything you ask them to do!

 - But you must tell them very precisely what you want.